#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##
## Interconnect Types
##
##   This is a library of generic inter-component interactions.
##

apiVersion: skupperx.io/compose/v1alpha1
kind: Block
type: skupperx.io/connector
metadata:
  name: library/tcp-connection
  annotations:
    platform: skupper-v2
spec:
  config:
    keyPrefix:
      type: string-name
      description: "Prefix annotation for the generated routing keys"
      default: tcp
    distribution:
      type: enum
      typeValues: ["balanced", "closest"]
      description: "Distribution algorithm used in the network for service traffic"
      default: balanced
    priority:
      type: integer
      typeRange: [0, 7]
      description: "Priority used to forward service traffic through the network"
      default: 4
    protocol:
      type: string-name
      description: "Application protocol that runs over the transport"
      default: none
    connectorType:
      type: enum
      typeValues: ["host", "selector"]
      description: "How the connector locates target processes"
      default: selector
    networkPolicyOnAcceptor:
      type: bool
      description: "Generate network policy to match the acceptor"
      default: true
    networkPolicyOnConnector:
      type: bool
      description: "Generate network policy to match the connector"
      default: true
    vanFlowTransport:
      type: bool
      description: "Generate vanFlow transport events"
      default: false
    vanFlowProtocol:
      type: bool
      description: "Generate vanFlow protocol events"
      default: false
  interfaces:
  - name: acceptor
    role: accept
  - name: connector
    role: connect
  body:
    simple:
    - affinity: [acceptor]
      targetPlatforms: [sk2]
      description: "Interface to Skupper-v2 acceptors on kubernetes sites"
      template: |
        - apiVersion: skupper.io/v2alpha1
          kind: Connector
          metadata:
            name: connector-{{.ident}}
          spec:
            type: tcp
            selector: {{$affblock.selectorKey}}={{$affblock.selectorValue}}
            port: {{$affif.port}}
            routingKey: {{.keyPrefix}}{{.name}}
        {{- if .networkPolicyOnAcceptor}}
        - apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: ingress-policy-{{.ident}}
          spec:
            podSelector:
              matchLabels:
                {{$affblock.selectorKey}} : {{$affblock.selectorValue}}
            policyTypes:
            - Ingress
            ingress:
            - from:
              - podSelector:
                  matchLabels:
                    skupper.io/component: router
              ports:
              - protocol: TCP
                port: {{$affif.port}}
        {{end}}
    - affinity: [connector]
      targetPlatforms: [sk2]
      description: "Interface to Skupper-v2 connectors on kubernetes sites"
      template: |
        - apiVersion: skupper.io/v2alpha1
          kind: Listener
          metadata:
            name: listener-{{.ident}}
          spec:
            type: tcp
            host: {{$affif.host}}
            port: {{$affif.port}}
            routingKey: {{.keyPrefix}}{{.name}}
        {{- if .networkPolicyOnConnector}}
        - apiVersion: networking.k8s.io/v1
          kind: NetworkPolicy
          metadata:
            name: egress-policy-{{.ident}}
          spec:
            podSelector:
              matchLabels:
                {{$affblock.selectorKey} : {{$affblock.selectorValue}}
            policyTypes:
            - Egress
            egress:
            - to:
              - podSelector:
                  matchLabels:
                    skupper.io/component: router
              ports:
              - protocol: TCP
                port: {{$affif.port}}
        {{end}}

---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: library/tcpIngress
type: skupperx.io/ingress
spec:
  interfaces:
  - name: connector
    role: connect
  body:
    ingress: route

##
## NearestPrime transaction processor
##

---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: nearestprime
type: skupperx.io/component
spec:
  config:
    replicas:
      type: integer
      default: 1
    selectorKey:
      type: string
      default: application
    selectorValue:
      type: string
      default: nearestprime
  interfaces:
  - name: postgres
    blockType: postgres-balanced
    role: connect
    host: database
    port: 5432
  - name: control
    blockType: skx.io/http-simple
    role: accept
    port: 8000
  body:
    simple:
    - targetPlatforms: [sk2, podman-sk2]
      template: |
        - apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nearestprime-{{.ident}}
          spec:
            replicas: {{.replicas}}
            selector:
              matchLabels:
                {{.selectorKey}}: {{.selectorValue}}
            template:
              metadata:
                labels:
                  {{.selectorKey}}: {{.selectorValue}}
              spec:
                containers:
                - name: nearestprime
                  image: quay.io/tedlross/nearestprime:latest
                  imagePullPolicy: Always
                  livenessProbe:
                    failureThreshold: 3
                    httpGet:
                      path: /healthz
                      port: {{$localif.control.port}}
                      scheme: HTTP
                    initialDelaySeconds: 60
                    periodSeconds: 10
                    successThreshold: 1
                    timeoutSeconds: 5
                  ports:
                  - containerPort: {{$localif.control.port}}
                  env:
                  - name: DDW_USER
                    value: access
                  - name: DDW_PASSWORD
                    value: demopass
                  - name: DDW_HOST
                    value: {{$localif.postgres.host}}
                  - name: DDW_SITENAME
                    value: {{$site.name}}

##
## PostgresSql Database
##
---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: postgres/engine
type: skupperx.io/component
spec:
  config:
    selectorKey:
      type: string-name
      default: block
    selectorValue:
      type: string-name
      default: postgresql
    POSTGRES_DB:
      type: string
      default: demo-db
    POSTGRES_USER:
      type: string
      default: access
    POSTGRES_PASSWORD:
      type: string
      default: demopass
    imageVersion:
      type: string
      default: "15"
  interfaces:
  - name: postgres
    blockType: postgres-balanced
    role: accept
    maxBindings: unlimited
    port: 5432
  - name: files
    blockType: postgres-volume
    role: mount
    volumeSize: 5Gi
  body:
    kubeTemplates:
    - template:
      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: postgres-${ident}
        spec:
          replicas: 1
          selector:
            matchLabels:
              ${selectorKey}: ${selectorValue}
          template:
            metadata:
              labels:
                ${selectorKey}: ${selectorValue}
            spec:
              containers:
              - name: postgres
                image: postgres:${imageVersion}
                imagePullPolicy: "IfNotPresent"
                ports:
                - containerPort: ${localif.postgres:port}
                env:
                - name: POSTGRES_DB
                  value: ${POSTGRES_DB}
                - name: POSTGRES_USER
                  value: ${POSTGRES_USER}
                - name: POSTGRES_PASSWORD
                  value: ${POSTGRES_PASSWORD}
                volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: postgresdb
              volumes:
              - name: postgresdb
                emptyDir:
                  sizeLimit: ${localif.files:volumeSize}

---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: postgres/volume
type: skupperx.io/connector
spec:
  config:
    storageClass:
      type: string
      default: ibmc-vpc-block-10iops-tier
    accessModes:
      type: string
      default: ReadWriteMany
    capacity:
      type: string
      default: 5Gi
  interfaces:
  - name: mountpoint
    role: mount
  body:
    kubeTemplates:
    - affinity: mountpoint
      template:
      - apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: postgres-pv-${ident}
        spec:
          storageClassName: ${storageClass}
          capacity:
            storage: ${capacity}
          accessModes:
          - ${accessModes}
          hostPath:
            path: "/mnt/data"
      - apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: postgres-pvc-${ident}
        spec:
          storageClassName: ${storageClass}
          accessModes:
          - ${accessModes}
          resources:
            requests:
              storage: ${peerif:volumeSize}

---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: postgres/subsystem
type: skupperx.io/component
spec:
  interfaces:
  - name: postgres
    blockType: postgres-balanced
    role: accept
  body:
    composite:
      blocks:
      - name: database
        block: postgres/engine
        siteClasses:
        - hq
        bindings:
        - interface: postgres
          super: postgres
      - name: store
        block: postgres/volume
        bindings:
        - interface: mountpoint
          block: database
          blockInterface: files

---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: nearestprime/main
type: skupperx.io/component
spec:
  interfaces:
  - name: request
    blockType: library/http-simple
    role: accept
  body:
    composite:
      blocks:
      - name: database
        block: postgres/subsystem
        siteClasses:
        - hq
      - name: worker
        block: nearestprime
        config:
          replicas: 2
        siteClasses:
        - worksite
        bindings:
        - interface: control
          super: request
      - name: worker-to-database
        block: library/tcp-connection
        config:
          keyPrefix: pg
          protocol: postgres
          connectorType: selector
        bindings:
        - interface: connector
          block: worker
          blockInterface: postgres
        - interface: acceptor
          block: database
          blockInterface: postgres

---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: nearestprime/container
type: skupperx.io/container
spec:
  body:
    composite:
      blocks:
      - name: mainApp
        block: nearestprime/main
        siteClasses:
        - hq
      - name: requestIngress
        block: nearestprime/ingress
        siteClasses:
        - hq
      - name: request-ingress-to-main
        block: library/tcp-connection
        config:
          keyPrefix: http
          protocol: http
          connectorType: selector
        bindings:
        - interface: acceptor
          block: mainApp
          blockInterface: request
        - interface: connector
          block: requestIngress
          blockInterface: connector

---
apiVersion: skupperx.io/compose/v1alpha1
kind: Block
metadata:
  name: nearestprime/ingress
type: skupperx.io/ingress
spec:
  config:
    serviceName: np-control.test
    namePrefix: control
  interfaces:
  - name: connector
    role: connect
    host: nprime
    port: 8000
  body:
    kubeTemplates:
    - template:
      - apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${namePrefix}-${ident}
        spec:
          ingressClassName: nginx
          rules:
            - host: ${serviceName}
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: ${localif.connector:host}
                        port:
                          number: ${localif.connector:port}
